import styles from '../styles/Home.module.css'
import { RedeNeural } from '../components/rede-neural'
import { RNPerceptron } from '../components/perceptron'
import Head from 'next/head'
import { useState } from 'react'

export default function Home() {
  const [input1, setInput1] = useState(0);
  const [input2, setInput2] = useState(1);
  const [target1, setTarget1] = useState(1);
  const [output, setOutput] = useState(0);
  const [erro, setErro] = useState(0);
  const [epoca, setEpoca] = useState(0);

  // feedforward

  const IAFRIDAY = (e) => {
    e.preventDefault();

    const config = {
      inputs: [input1, input2],
      target: target1/10,
      epochs: 50,
      activation: 'tanh',
    }

    const neuronio = new RedeNeural()
    neuronio.train(config)
    const result = neuronio.feedforward()
    console.log(`época': ${result.epoch} - taxa de erro: ${result.error} - saída: ${result.output}`)
    setEpoca(result.epoch)
    setErro(result.error)
    setOutput(result.output)
  }

  // perceptron

  const treinar = [
    {input: [0, 0], output: [0]},
    {input: [0, 1], output: [1]},
    {input: [1, 0], output: [1]},
    {input: [1, 1], output: [0]}
  ]

  const neuronio2 = new RNPerceptron();
  neuronio2.train(treinar);
  const result  = neuronio2.predict([0, 0]);
  const result2  = neuronio2.predict([0, 1]);
  const result3  = neuronio2.predict([1, 0]);
  const result4  = neuronio2.predict([1, 1]);

  //console.log(`0 xor 0: ${result}, 0 xor 1: ${result2}, 1 xor 0: ${result3}, 1 xor 1: ${result4}`)

  // network

  const params = {
    input_nodes: 2,
    hidden_nodes: 4,
    output_nodes: 1,
    epochs: 40000,
    learning_rate: 0.5
  };

  /*const input = math.matrix([[0, 0], [0, 1], [1, 0], [1, 1]])
  const target = math.matrix([[0], [1], [1], [0]])

  const neuronio3 = new NeuralNetwork(params);
  neuronio3.train(input, target);

  const prever  = parseFloat(neuronio3.predict([0, 0]._data)).toFixed(4);
  const prever2  = parseFloat(neuronio3.predict([0, 1]._data)).toFixed(4);
  const prever3  = parseFloat(neuronio3.predict([1, 0]._data)).toFixed(4);
  const prever4  = parseFloat(neuronio3.predict([1, 1]._data)).toFixed(4);

  console.log(`0 xor 0: ${prever}, 0 xor 1: ${prever2}, 1 xor 0: ${prever3}, 1 xor 1: ${prever4}`);*/

  return (
    <div className={styles.container}>
      <Head>
        <title>Deep learning</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>IA FRIDAY</h1>
        <form onSubmit={(e) => IAFRIDAY(e)}>
          <input 
            type="number" 
            placeholder="Digite o primeiro valor de entrada" 
            className={styles.input}
            onChange={(e) => setInput1(e.target.value)}
          />
          <input 
            type="number" 
            placeholder="Digite o segundo valor de entrada" 
            className={styles.input}
            onChange={(e) => setInput2(e.target.value)}
          />
          <input 
            type="number" 
            placeholder="Digite o valor esperado" 
            className={styles.input}
            onChange={(e) => setTarget1(e.target.value)}
          />
          <button type="submit">Rodar Inteligencia Artificial</button>
        </form>
        <p>Vezes que rodou:</p>
        <p>{epoca}</p>
        <p>Erro:</p>
        <p>{erro}</p>
        <p>Saída:</p>
        <p>{output}</p>
      </main>
    </div>
  )
}